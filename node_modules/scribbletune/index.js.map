{"version":3,"file":"index.js","mappings":"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","sources":["webpack://scribbletune/./node_modules/harmonics/main.js","webpack://scribbletune/./node_modules/jsmidgen/lib/jsmidgen.js","webpack://scribbletune/./src/arp.ts","webpack://scribbletune/./src/clip.ts","webpack://scribbletune/./src/midi.ts","webpack://scribbletune/./src/progression.ts","webpack://scribbletune/./src/utils.ts","webpack://scribbletune/external commonjs \"fs\"","webpack://scribbletune/webpack/bootstrap","webpack://scribbletune/webpack/runtime/node module decorator","webpack://scribbletune/./src/index.ts"],"sourcesContent":["(()=>{\"use strict\";var n={413:n=>{n.exports=JSON.parse('{\"5th\":\"100000010000\",\"M7#5sus4\":\"100001001001\",\"7#5sus4\":\"100001001010\",\"sus4\":\"100001010000\",\"M7sus4\":\"100001010001\",\"7sus4\":\"100001010010\",\"7no5\":\"100010000010\",\"aug\":\"100010001000\",\"M7b6\":\"100010001001\",\"maj7#5\":\"100010001001\",\"7#5\":\"100010001010\",\"7b13\":\"100010001010\",\"M\":\"100010010000\",\"maj7\":\"100010010001\",\"7th\":\"100010010010\",\"6th\":\"100010010100\",\"7add6\":\"100010010110\",\"7b6\":\"100010011010\",\"Mb5\":\"100010100000\",\"M7b5\":\"100010100001\",\"7b5\":\"100010100010\",\"maj#4\":\"100010110001\",\"7#11\":\"100010110010\",\"M6#11\":\"100010110100\",\"7#11b13\":\"100010111010\",\"m#5\":\"100100001000\",\"mb6M7\":\"100100001001\",\"m7#5\":\"100100001010\",\"m\":\"100100010000\",\"m/ma7\":\"100100010001\",\"m7\":\"100100010010\",\"m6\":\"100100010100\",\"mMaj7b6\":\"100100011001\",\"dim\":\"100100100000\",\"oM7\":\"100100100001\",\"m7b5\":\"100100100010\",\"dim7\":\"100100100100\",\"o7M7\":\"100100100101\",\"4th\":\"100101000010\",\"madd4\":\"100101010000\",\"m7add11\":\"100101010010\",\"+add#9\":\"100110001000\",\"7#5#9\":\"100110001010\",\"7#9\":\"100110010010\",\"13#9\":\"100110010110\",\"7#9b13\":\"100110011010\",\"maj7#9#11\":\"100110110001\",\"7#9#11\":\"100110110010\",\"13#9#11\":\"100110110110\",\"7#9#11b13\":\"100110111010\",\"sus2\":\"101000010000\",\"M9#5sus4\":\"101001001001\",\"sus24\":\"101001010000\",\"M9sus4\":\"101001010001\",\"11th\":\"101001010010\",\"9sus4\":\"101001010010\",\"13sus4\":\"101001010110\",\"9no5\":\"101010000010\",\"13no5\":\"101010000110\",\"M#5add9\":\"101010001000\",\"maj9#5\":\"101010001001\",\"9#5\":\"101010001010\",\"9b13\":\"101010001010\",\"Madd9\":\"101010010000\",\"maj9\":\"101010010001\",\"9th\":\"101010010010\",\"6/9\":\"101010010100\",\"maj13\":\"101010010101\",\"M7add13\":\"101010010101\",\"13th\":\"101010010110\",\"M9b5\":\"101010100001\",\"9b5\":\"101010100010\",\"13b5\":\"101010100110\",\"9#5#11\":\"101010101010\",\"maj9#11\":\"101010110001\",\"9#11\":\"101010110010\",\"69#11\":\"101010110100\",\"M13#11\":\"101010110101\",\"13#11\":\"101010110110\",\"9#11b13\":\"101010111010\",\"m9#5\":\"101100001010\",\"madd9\":\"101100010000\",\"mM9\":\"101100010001\",\"m9\":\"101100010010\",\"m69\":\"101100010100\",\"m13\":\"101100010110\",\"mMaj9b6\":\"101100011001\",\"m9b5\":\"101100100010\",\"m11A\":\"101101001010\",\"m11\":\"101101010010\",\"b9sus\":\"110001010010\",\"11b9\":\"110001010010\",\"7sus4b9b13\":\"110001011010\",\"alt7\":\"110010000010\",\"7#5b9\":\"110010001010\",\"Maddb9\":\"110010010000\",\"M7b9\":\"110010010001\",\"7b9\":\"110010010010\",\"13b9\":\"110010010110\",\"7b9b13\":\"110010011010\",\"7#5b9#11\":\"110010101010\",\"7b9#11\":\"110010110010\",\"13b9#11\":\"110010110110\",\"7b9b13#11\":\"110010111010\",\"mb6b9\":\"110100001000\",\"7b9#9\":\"110110010010\"}')},722:n=>{n.exports=JSON.parse('{\"major pentatonic\":\"101010010100\",\"ionian pentatonic\":\"100011010001\",\"mixolydian pentatonic\":\"100011010010\",\"ritusen\":\"101001010100\",\"egyptian\":\"101001010010\",\"neopolitan major pentatonic\":\"100011100010\",\"vietnamese 1\":\"100101011000\",\"pelog\":\"110100011000\",\"kumoijoshi\":\"110001011000\",\"hirajoshi\":\"101100011000\",\"iwato\":\"110001100010\",\"in-sen\":\"110001010010\",\"lydian pentatonic\":\"100010110001\",\"malkos raga\":\"100101001010\",\"locrian pentatonic\":\"100101100010\",\"minor pentatonic\":\"100101010010\",\"minor six pentatonic\":\"100101010100\",\"flat three pentatonic\":\"101100010100\",\"flat six pentatonic\":\"101010011000\",\"scriabin\":\"110010010100\",\"whole tone pentatonic\":\"100010101010\",\"lydian #5P pentatonic\":\"100010101001\",\"lydian dominant pentatonic\":\"100010110010\",\"minor #7M pentatonic\":\"100101010001\",\"super locrian pentatonic\":\"100110100010\",\"minor hexatonic\":\"101101010001\",\"augmented\":\"100110011001\",\"major blues\":\"101110010100\",\"piongio\":\"101001010110\",\"prometheus neopolitan\":\"110010100110\",\"prometheus\":\"101010100110\",\"mystery #1\":\"110010101010\",\"six tone symmetric\":\"110011001100\",\"whole tone\":\"101010101010\",\"messiaen\\'s mode #5\":\"110001110001\",\"minor blues\":\"100101110010\",\"locrian major\":\"101011101010\",\"double harmonic lydian\":\"110010111001\",\"harmonic minor\":\"101101011001\",\"altered\":\"110110101010\",\"locrian #2\":\"101101101010\",\"mixolydian b6\":\"101011011010\",\"lydian dominant\":\"101010110110\",\"lydian\":\"101010110101\",\"lydian augmented\":\"101010101101\",\"dorian b2\":\"110101010110\",\"melodic minor\":\"101101010101\",\"locrian\":\"110101101010\",\"ultralocrian\":\"110110101100\",\"locrian 6\":\"110101100110\",\"augmented heptatonic\":\"100111011001\",\"romanian minor\":\"101100110110\",\"dorian #4\":\"101100110110\",\"lydian diminished\":\"101100110101\",\"phrygian\":\"110101011010\",\"leading whole tone\":\"101010101011\",\"lydian minor\":\"101010111010\",\"phrygian dominant\":\"110011011010\",\"balinese\":\"110101011001\",\"neopolitan major\":\"110101010101\",\"aeolian\":\"101101011010\",\"harmonic major\":\"101011011001\",\"double harmonic major\":\"110011011001\",\"dorian\":\"101101010110\",\"hungarian minor\":\"101100111001\",\"hungarian major\":\"100110110110\",\"oriental\":\"110011100110\",\"flamenco\":\"110110110010\",\"todi raga\":\"110100111001\",\"mixolydian\":\"101011010110\",\"persian\":\"110011101001\",\"major\":\"101011010101\",\"enigmatic\":\"110010101011\",\"major augmented\":\"101011001101\",\"lydian #9\":\"100110110101\",\"messiaen\\'s mode #4\":\"111001111001\",\"purvi raga\":\"110011111001\",\"spanish heptatonic\":\"110111011010\",\"bebop\":\"101011010111\",\"bebop minor\":\"101111010110\",\"bebop major\":\"101011011101\",\"bebop locrian\":\"110101111010\",\"minor bebop\":\"101101011011\",\"diminished\":\"101101101101\",\"ichikosucho\":\"101011110101\",\"minor six diminished\":\"101101011101\",\"half-whole diminished\":\"110110110110\",\"kafi raga\":\"100111010111\",\"messiaen\\'s mode #6\":\"101011101011\",\"composite blues\":\"101111110110\",\"messiaen\\'s mode #3\":\"101110111011\",\"messiaen\\'s mode #7\":\"111101111101\",\"chromatic\":\"111111111111\",\"ionian\":\"101011010101\",\"minor\":\"101101011010\"}')}},e={};function o(a){var i=e[a];if(void 0!==i)return i.exports;var r=e[a]={exports:{}};return n[a](r,r.exports,o),r.exports}o.d=(n,e)=>{for(var a in e)o.o(e,a)&&!o.o(n,a)&&Object.defineProperty(n,a,{enumerable:!0,get:e[a]})},o.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),o.r=n=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(n,\"__esModule\",{value:!0})};var a={};(()=>{o.r(a),o.d(a,{chord:()=>m,chords:()=>t,inlineChord:()=>r,scale:()=>c,scales:()=>s});var n=o(722),e=o(413),i=function(o){var a=o.scale,i=o.chord,r=a||i,t=a?\"scale\":\"chord\";if(\"string\"!=typeof r)throw new Error(\"\".concat(r,\" is not a valid input for \").concat(t));var s,m,c=r.indexOf(\" \");-1===c?(s=r.slice(1),m=r[0],\"b\"!==r[1]&&\"#\"!==r[1]||(s=r.slice(2),m+=r[1])):(s=r.slice(-1===c?1:c+1),m=r.slice(0,c));var d=function(n){return{\"C#\":\"Db\",\"D#\":\"Eb\",\"F#\":\"Gb\",\"G#\":\"Ab\",\"A#\":\"Bb\"}[n.toUpperCase()]||n.charAt(0).toUpperCase()+n.slice(1)}(m.replace(/\\d/g,\"\")),l=\"\"!==m.replace(/\\D/g,\"\")?+m.replace(/\\D/g,\"\"):4;if(isNaN(l))throw new Error(\"\".concat(m[0],\" does not have a valid octave\"));if(!n[s]&&!e[s])throw new Error(\"\".concat(r,\" is not a valid \").concat(t));for(var b=function(n,e){var o=[\"C\",\"Db\",\"D\",\"Eb\",\"E\",\"F\",\"Gb\",\"G\",\"Ab\",\"A\",\"Bb\",\"B\"],a=o.map((function(n){return n+e})),i=o.map((function(n){return n+(e+1)})),r=a.concat(i);return r.slice(r.indexOf(n+e))}(d,l),u=[],p=0,h=0,f=a?n:e;p<f[s].length;)\"1\"===f[s][p]&&u.push(b[h]),p++,h++;return u},r=function(n){var e,o,a=\"b9sus\",r=4;return n.includes(a)?(o=a,e=n.slice(0,n.indexOf(a))):(e=n[0],o=n.slice(1),\"b\"!==n[1]&&\"#\"!==n[1]||(e+=n[1],o=n.slice(2))),n.includes(\"_\")&&(r=+n.split(\"_\")[1],o=o.slice(0,o.indexOf(\"_\"))),i({chord:e+r+\" \"+o})},t=function(){return Object.keys(e)},s=function(){return Object.keys(n)},m=function(n){return i({chord:n})},c=function(n){return i({scale:n})}})();var i=exports;for(var r in a)i[r]=a[r];a.__esModule&&Object.defineProperty(i,\"__esModule\",{value:!0})})();\n//# sourceMappingURL=main.js.map","var Midi = {};\n\n(function(exported) {\n\n\tvar DEFAULT_VOLUME   = exported.DEFAULT_VOLUME   = 90;\n\tvar DEFAULT_DURATION = exported.DEFAULT_DURATION = 128;\n\tvar DEFAULT_CHANNEL  = exported.DEFAULT_CHANNEL  = 0;\n\n\t/* ******************************************************************\n\t * Utility functions\n\t ****************************************************************** */\n\n\tvar Util = {\n\n\t\tmidi_letter_pitches: { a:21, b:23, c:12, d:14, e:16, f:17, g:19 },\n\n\t\t/**\n\t\t * Convert a symbolic note name (e.g. \"c4\") to a numeric MIDI pitch (e.g.\n\t\t * 60, middle C).\n\t\t *\n\t\t * @param {string} n - The symbolic note name to parse.\n\t\t * @returns {number} The MIDI pitch that corresponds to the symbolic note\n\t\t * name.\n\t\t */\n\t\tmidiPitchFromNote: function(n) {\n\t\t\tvar matches = /([a-g])(#+|b+)?([0-9]+)$/i.exec(n);\n\t\t\tvar note = matches[1].toLowerCase(), accidental = matches[2] || '', octave = parseInt(matches[3], 10);\n\t\t\treturn (12 * octave) + Util.midi_letter_pitches[note] + (accidental.substr(0,1)=='#'?1:-1) * accidental.length;\n\t\t},\n\n\t\t/**\n\t\t * Ensure that the given argument is converted to a MIDI pitch. Note that\n\t\t * it may already be one (including a purely numeric string).\n\t\t *\n\t\t * @param {string|number} p - The pitch to convert.\n\t\t * @returns {number} The resulting numeric MIDI pitch.\n\t\t */\n\t\tensureMidiPitch: function(p) {\n\t\t\tif (typeof p == 'number' || !/[^0-9]/.test(p)) {\n\t\t\t\t// numeric pitch\n\t\t\t\treturn parseInt(p, 10);\n\t\t\t} else {\n\t\t\t\t// assume it's a note name\n\t\t\t\treturn Util.midiPitchFromNote(p);\n\t\t\t}\n\t\t},\n\n\t\tmidi_pitches_letter: { '12':'c', '13':'c#', '14':'d', '15':'d#', '16':'e', '17':'f', '18':'f#', '19':'g', '20':'g#', '21':'a', '22':'a#', '23':'b' },\n\t\tmidi_flattened_notes: { 'a#':'bb', 'c#':'db', 'd#':'eb', 'f#':'gb', 'g#':'ab' },\n\n\t\t/**\n\t\t * Convert a numeric MIDI pitch value (e.g. 60) to a symbolic note name\n\t\t * (e.g. \"c4\").\n\t\t *\n\t\t * @param {number} n - The numeric MIDI pitch value to convert.\n\t\t * @param {boolean} [returnFlattened=false] - Whether to prefer flattened\n\t\t * notes to sharpened ones. Optional, default false.\n\t\t * @returns {string} The resulting symbolic note name.\n\t\t */\n\t\tnoteFromMidiPitch: function(n, returnFlattened) {\n\t\t\tvar octave = 0, noteNum = n, noteName, returnFlattened = returnFlattened || false;\n\t\t\tif (n > 23) {\n\t\t\t\t// noteNum is on octave 1 or more\n\t\t\t\toctave = Math.floor(n/12) - 1;\n\t\t\t\t// subtract number of octaves from noteNum\n\t\t\t\tnoteNum = n - octave * 12;\n\t\t\t}\n\n\t\t\t// get note name (c#, d, f# etc)\n\t\t\tnoteName = Util.midi_pitches_letter[noteNum];\n\t\t\t// Use flattened notes if requested (e.g. f# should be output as gb)\n\t\t\tif (returnFlattened && noteName.indexOf('#') > 0) {\n\t\t\t\tnoteName = Util.midi_flattened_notes[noteName];\n\t\t\t}\n\t\t\treturn noteName + octave;\n\t\t},\n\n\t\t/**\n\t\t * Convert beats per minute (BPM) to microseconds per quarter note (MPQN).\n\t\t *\n\t\t * @param {number} bpm - A number in beats per minute.\n\t\t * @returns {number} The number of microseconds per quarter note.\n\t\t */\n\t\tmpqnFromBpm: function(bpm) {\n\t\t\tvar mpqn = Math.floor(60000000 / bpm);\n\t\t\tvar ret=[];\n\t\t\tdo {\n\t\t\t\tret.unshift(mpqn & 0xFF);\n\t\t\t\tmpqn >>= 8;\n\t\t\t} while (mpqn);\n\t\t\twhile (ret.length < 3) {\n\t\t\t\tret.push(0);\n\t\t\t}\n\t\t\treturn ret;\n\t\t},\n\n\t\t/**\n\t\t * Convert microseconds per quarter note (MPQN) to beats per minute (BPM).\n\t\t *\n\t\t * @param {number} mpqn - The number of microseconds per quarter note.\n\t\t * @returns {number} A number in beats per minute.\n\t\t */\n\t\tbpmFromMpqn: function(mpqn) {\n\t\t\tvar m = mpqn;\n\t\t\tif (typeof mpqn[0] != 'undefined') {\n\t\t\t\tm = 0;\n\t\t\t\tfor (var i=0, l=mpqn.length-1; l >= 0; ++i, --l) {\n\t\t\t\t\tm |= mpqn[i] << l;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Math.floor(60000000 / mpqn);\n\t\t},\n\n\t\t/**\n\t\t * Converts an array of bytes to a string of hexadecimal characters. Prepares\n\t\t * it to be converted into a base64 string.\n\t\t *\n\t\t * @param {Array} byteArray - Array of bytes to be converted.\n\t\t * @returns {string} Hexadecimal string, e.g. \"097B8A\".\n\t\t */\n\t\tcodes2Str: function(byteArray) {\n\t\t\treturn String.fromCharCode.apply(null, byteArray);\n\t\t},\n\n\t\t/**\n\t\t * Converts a string of hexadecimal values to an array of bytes. It can also\n\t\t * add remaining \"0\" nibbles in order to have enough bytes in the array as the\n\t\t * `finalBytes` parameter.\n\t\t *\n\t\t * @param {string} str - string of hexadecimal values e.g. \"097B8A\"\n\t\t * @param {number} [finalBytes] - Optional. The desired number of bytes\n\t\t * (not nibbles) that the returned array should contain.\n\t\t * @returns {Array} An array of nibbles.\n\t\t */\n\t\tstr2Bytes: function (str, finalBytes) {\n\t\t\tif (finalBytes) {\n\t\t\t\twhile ((str.length / 2) < finalBytes) { str = \"0\" + str; }\n\t\t\t}\n\n\t\t\tvar bytes = [];\n\t\t\tfor (var i=str.length-1; i>=0; i = i-2) {\n\t\t\t\tvar chars = i === 0 ? str[i] : str[i-1] + str[i];\n\t\t\t\tbytes.unshift(parseInt(chars, 16));\n\t\t\t}\n\n\t\t\treturn bytes;\n\t\t},\n\n\t\t/**\n\t\t * Translates number of ticks to MIDI timestamp format, returning an array\n\t\t * of bytes with the time values. MIDI has a very particular way to express\n\t\t * time; take a good look at the spec before ever touching this function.\n\t\t *\n\t\t * @param {number} ticks - Number of ticks to be translated.\n\t\t * @returns {number} Array of bytes that form the MIDI time value.\n\t\t */\n\t\ttranslateTickTime: function(ticks) {\n\t\t\tvar buffer = ticks & 0x7F;\n\n\t\t\twhile (ticks = ticks >> 7) {\n\t\t\t\tbuffer <<= 8;\n\t\t\t\tbuffer |= ((ticks & 0x7F) | 0x80);\n\t\t\t}\n\n\t\t\tvar bList = [];\n\t\t\twhile (true) {\n\t\t\t\tbList.push(buffer & 0xff);\n\n\t\t\t\tif (buffer & 0x80) { buffer >>= 8; }\n\t\t\t\telse { break; }\n\t\t\t}\n\t\t\treturn bList;\n\t\t},\n\n\t};\n\n\t/* ******************************************************************\n\t * Event class\n\t ****************************************************************** */\n\n\t/**\n\t * Construct a MIDI event.\n\t *\n\t * Parameters include:\n\t *  - time [optional number] - Ticks since previous event.\n\t *  - type [required number] - Type of event.\n\t *  - channel [required number] - Channel for the event.\n\t *  - param1 [required number] - First event parameter.\n\t *  - param2 [optional number] - Second event parameter.\n\t */\n\tvar MidiEvent = function(params) {\n\t\tif (!this) return new MidiEvent(params);\n\t\tif (params &&\n\t\t\t\t(params.type    !== null || params.type    !== undefined) &&\n\t\t\t\t(params.channel !== null || params.channel !== undefined) &&\n\t\t\t\t(params.param1  !== null || params.param1  !== undefined)) {\n\t\t\tthis.setTime(params.time);\n\t\t\tthis.setType(params.type);\n\t\t\tthis.setChannel(params.channel);\n\t\t\tthis.setParam1(params.param1);\n\t\t\tthis.setParam2(params.param2);\n\t\t}\n\t};\n\n\t// event codes\n\tMidiEvent.NOTE_OFF           = 0x80;\n\tMidiEvent.NOTE_ON            = 0x90;\n\tMidiEvent.AFTER_TOUCH        = 0xA0;\n\tMidiEvent.CONTROLLER         = 0xB0;\n\tMidiEvent.PROGRAM_CHANGE     = 0xC0;\n\tMidiEvent.CHANNEL_AFTERTOUCH = 0xD0;\n\tMidiEvent.PITCH_BEND         = 0xE0;\n\n\n\t/**\n\t * Set the time for the event in ticks since the previous event.\n\t *\n\t * @param {number} ticks - The number of ticks since the previous event. May\n\t * be zero.\n\t */\n\tMidiEvent.prototype.setTime = function(ticks) {\n\t\tthis.time = Util.translateTickTime(ticks || 0);\n\t};\n\n\t/**\n\t * Set the type of the event. Must be one of the event codes on MidiEvent.\n\t *\n\t * @param {number} type - Event type.\n\t */\n\tMidiEvent.prototype.setType = function(type) {\n\t\tif (type < MidiEvent.NOTE_OFF || type > MidiEvent.PITCH_BEND) {\n\t\t\tthrow new Error(\"Trying to set an unknown event: \" + type);\n\t\t}\n\n\t\tthis.type = type;\n\t};\n\n\t/**\n\t * Set the channel for the event. Must be between 0 and 15, inclusive.\n\t *\n\t * @param {number} channel - The event channel.\n\t */\n\tMidiEvent.prototype.setChannel = function(channel) {\n\t\tif (channel < 0 || channel > 15) {\n\t\t\tthrow new Error(\"Channel is out of bounds.\");\n\t\t}\n\n\t\tthis.channel = channel;\n\t};\n\n\t/**\n\t * Set the first parameter for the event. Must be between 0 and 255,\n\t * inclusive.\n\t *\n\t * @param {number} p - The first event parameter value.\n\t */\n\tMidiEvent.prototype.setParam1 = function(p) {\n\t\tthis.param1 = p;\n\t};\n\n\t/**\n\t * Set the second parameter for the event. Must be between 0 and 255,\n\t * inclusive.\n\t *\n\t * @param {number} p - The second event parameter value.\n\t */\n\tMidiEvent.prototype.setParam2 = function(p) {\n\t\tthis.param2 = p;\n\t};\n\n\t/**\n\t * Serialize the event to an array of bytes.\n\t *\n\t * @returns {Array} The array of serialized bytes.\n\t */\n\tMidiEvent.prototype.toBytes = function() {\n\t\tvar byteArray = [];\n\n\t\tvar typeChannelByte = this.type | (this.channel & 0xF);\n\n\t\tbyteArray.push.apply(byteArray, this.time);\n\t\tbyteArray.push(typeChannelByte);\n\t\tbyteArray.push(this.param1);\n\n\t\t// Some events don't have a second parameter\n\t\tif (this.param2 !== undefined && this.param2 !== null) {\n\t\t\tbyteArray.push(this.param2);\n\t\t}\n\t\treturn byteArray;\n\t};\n\n\t/* ******************************************************************\n\t * MetaEvent class\n\t ****************************************************************** */\n\n\t/**\n\t * Construct a meta event.\n\t *\n\t * Parameters include:\n\t *  - time [optional number] - Ticks since previous event.\n\t *  - type [required number] - Type of event.\n\t *  - data [optional array|string] - Event data.\n\t */\n\tvar MetaEvent = function(params) {\n\t\tif (!this) return new MetaEvent(params);\n\t\tvar p = params || {};\n\t\tthis.setTime(params.time);\n\t\tthis.setType(params.type);\n\t\tthis.setData(params.data);\n\t};\n\n\tMetaEvent.SEQUENCE   = 0x00;\n\tMetaEvent.TEXT       = 0x01;\n\tMetaEvent.COPYRIGHT  = 0x02;\n\tMetaEvent.TRACK_NAME = 0x03;\n\tMetaEvent.INSTRUMENT = 0x04;\n\tMetaEvent.LYRIC      = 0x05;\n\tMetaEvent.MARKER     = 0x06;\n\tMetaEvent.CUE_POINT  = 0x07;\n\tMetaEvent.CHANNEL_PREFIX = 0x20;\n\tMetaEvent.END_OF_TRACK   = 0x2f;\n\tMetaEvent.TEMPO      = 0x51;\n\tMetaEvent.SMPTE      = 0x54;\n\tMetaEvent.TIME_SIG   = 0x58;\n\tMetaEvent.KEY_SIG    = 0x59;\n\tMetaEvent.SEQ_EVENT  = 0x7f;\n\n\t/**\n\t * Set the time for the event in ticks since the previous event.\n\t *\n\t * @param {number} ticks - The number of ticks since the previous event. May\n\t * be zero.\n\t */\n\tMetaEvent.prototype.setTime = function(ticks) {\n\t\tthis.time = Util.translateTickTime(ticks || 0);\n\t};\n\n\t/**\n\t * Set the type of the event. Must be one of the event codes on MetaEvent.\n\t *\n\t * @param {number} t - Event type.\n\t */\n\tMetaEvent.prototype.setType = function(t) {\n\t\tthis.type = t;\n\t};\n\n\t/**\n\t * Set the data associated with the event. May be a string or array of byte\n\t * values.\n\t *\n\t * @param {string|Array} d - Event data.\n\t */\n\tMetaEvent.prototype.setData = function(d) {\n\t\tthis.data = d;\n\t};\n\n\t/**\n\t * Serialize the event to an array of bytes.\n\t *\n\t * @returns {Array} The array of serialized bytes.\n\t */\n\tMetaEvent.prototype.toBytes = function() {\n\t\tif (!this.type) {\n\t\t\tthrow new Error(\"Type for meta-event not specified.\");\n\t\t}\n\n\t\tvar byteArray = [];\n\t\tbyteArray.push.apply(byteArray, this.time);\n\t\tbyteArray.push(0xFF, this.type);\n\n\t\t// If data is an array, we assume that it contains several bytes. We\n\t\t// apend them to byteArray.\n\t\tif (Array.isArray(this.data)) {\n\t\t\tbyteArray.push(this.data.length);\n\t\t\tbyteArray.push.apply(byteArray, this.data);\n\t\t} else if (typeof this.data == 'number') {\n\t\t\tbyteArray.push(1, this.data);\n\t\t} else if (this.data !== null && this.data !== undefined) {\n\t\t\t// assume string; may be a bad assumption\n\t\t\tbyteArray.push(this.data.length);\n\t\t\tvar dataBytes = this.data.split('').map(function(x){ return x.charCodeAt(0) });\n\t\t\tbyteArray.push.apply(byteArray, dataBytes);\n\t\t} else {\n\t\t\tbyteArray.push(0);\n\t\t}\n\n\t\treturn byteArray;\n\t};\n\n\t/* ******************************************************************\n\t * Track class\n\t ****************************************************************** */\n\n\t/**\n\t * Construct a MIDI track.\n\t *\n\t * Parameters include:\n\t *  - events [optional array] - Array of events for the track.\n\t */\n\tvar Track = function(config) {\n\t\tif (!this) return new Track(config);\n\t\tvar c = config || {};\n\t\tthis.events = c.events || [];\n\t};\n\n\tTrack.START_BYTES = [0x4d, 0x54, 0x72, 0x6b];\n\tTrack.END_BYTES   = [0x00, 0xFF, 0x2F, 0x00];\n\n\t/**\n\t * Add an event to the track.\n\t *\n\t * @param {MidiEvent|MetaEvent} event - The event to add.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addEvent = function(event) {\n\t\tthis.events.push(event);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Add a note-on event to the track.\n\t *\n\t * @param {number} channel - The channel to add the event to.\n\t * @param {number|string} pitch - The pitch of the note, either numeric or\n\t * symbolic.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @param {number} [velocity=90] - The volume for the note, defaults to\n\t * DEFAULT_VOLUME.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addNoteOn = Track.prototype.noteOn = function(channel, pitch, time, velocity) {\n\t\tthis.events.push(new MidiEvent({\n\t\t\ttype: MidiEvent.NOTE_ON,\n\t\t\tchannel: channel,\n\t\t\tparam1: Util.ensureMidiPitch(pitch),\n\t\t\tparam2: velocity || DEFAULT_VOLUME,\n\t\t\ttime: time || 0,\n\t\t}));\n\t\treturn this;\n\t};\n\n\t/**\n\t * Add a note-off event to the track.\n\t *\n\t * @param {number} channel - The channel to add the event to.\n\t * @param {number|string} pitch - The pitch of the note, either numeric or\n\t * symbolic.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @param {number} [velocity=90] - The velocity the note was released,\n\t * defaults to DEFAULT_VOLUME.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addNoteOff = Track.prototype.noteOff = function(channel, pitch, time, velocity) {\n\t\tthis.events.push(new MidiEvent({\n\t\t\ttype: MidiEvent.NOTE_OFF,\n\t\t\tchannel: channel,\n\t\t\tparam1: Util.ensureMidiPitch(pitch),\n\t\t\tparam2: velocity || DEFAULT_VOLUME,\n\t\t\ttime: time || 0,\n\t\t}));\n\t\treturn this;\n\t};\n\n\t/**\n\t * Add a note-on and -off event to the track.\n\t *\n\t * @param {number} channel - The channel to add the event to.\n\t * @param {number|string} pitch - The pitch of the note, either numeric or\n\t * symbolic.\n\t * @param {number} dur - The duration of the note, in ticks.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @param {number} [velocity=90] - The velocity the note was released,\n\t * defaults to DEFAULT_VOLUME.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addNote = Track.prototype.note = function(channel, pitch, dur, time, velocity) {\n\t\tthis.noteOn(channel, pitch, time, velocity);\n\t\tif (dur) {\n\t\t\tthis.noteOff(channel, pitch, dur, velocity);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * Add a note-on and -off event to the track for each pitch in an array of pitches.\n\t *\n\t * @param {number} channel - The channel to add the event to.\n\t * @param {array} chord - An array of pitches, either numeric or\n\t * symbolic.\n\t * @param {number} dur - The duration of the chord, in ticks.\n\t * @param {number} [velocity=90] - The velocity of the chord,\n\t * defaults to DEFAULT_VOLUME.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.addChord = Track.prototype.chord = function(channel, chord, dur, velocity) {\n\t\tif (!Array.isArray(chord) && !chord.length) {\n\t\t\tthrow new Error('Chord must be an array of pitches');\n\t\t}\n\t\tchord.forEach(function(note) {\n\t\t\tthis.noteOn(channel, note, 0, velocity);\n\t\t}, this);\n\t\tchord.forEach(function(note, index) {\n\t\t\tif (index === 0) {\n\t\t\t\tthis.noteOff(channel, note, dur);\n\t\t\t} else {\n\t\t\t\tthis.noteOff(channel, note);\n\t\t\t}\n\t\t}, this);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Set instrument for the track.\n\t *\n\t * @param {number} channel - The channel to set the instrument on.\n\t * @param {number} instrument - The instrument to set it to.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.setInstrument = Track.prototype.instrument = function(channel, instrument, time) {\n\t\tthis.events.push(new MidiEvent({\n\t\t\ttype: MidiEvent.PROGRAM_CHANGE,\n\t\t\tchannel: channel,\n\t\t\tparam1: instrument,\n\t\t\ttime: time || 0,\n\t\t}));\n\t\treturn this;\n\t};\n\n\t/**\n\t * Set the tempo for the track.\n\t *\n\t * @param {number} bpm - The new number of beats per minute.\n\t * @param {number} [time=0] - The number of ticks since the previous event,\n\t * defaults to 0.\n\t * @returns {Track} The current track.\n\t */\n\tTrack.prototype.setTempo = Track.prototype.tempo = function(bpm, time) {\n\t\tthis.events.push(new MetaEvent({\n\t\t\ttype: MetaEvent.TEMPO,\n\t\t\tdata: Util.mpqnFromBpm(bpm),\n\t\t\ttime: time || 0,\n\t\t}));\n\t\treturn this;\n\t};\n\n\t/**\n\t * Serialize the track to an array of bytes.\n\t *\n\t * @returns {Array} The array of serialized bytes.\n\t */\n\tTrack.prototype.toBytes = function() {\n\t\tvar trackLength = 0;\n\t\tvar eventBytes = [];\n\t\tvar startBytes = Track.START_BYTES;\n\t\tvar endBytes   = Track.END_BYTES;\n\n\t\tvar addEventBytes = function(event) {\n\t\t\tvar bytes = event.toBytes();\n\t\t\ttrackLength += bytes.length;\n\t\t\teventBytes.push.apply(eventBytes, bytes);\n\t\t};\n\n\t\tthis.events.forEach(addEventBytes);\n\n\t\t// Add the end-of-track bytes to the sum of bytes for the track, since\n\t\t// they are counted (unlike the start-of-track ones).\n\t\ttrackLength += endBytes.length;\n\n\t\t// Makes sure that track length will fill up 4 bytes with 0s in case\n\t\t// the length is less than that (the usual case).\n\t\tvar lengthBytes = Util.str2Bytes(trackLength.toString(16), 4);\n\n\t\treturn startBytes.concat(lengthBytes, eventBytes, endBytes);\n\t};\n\n\t/* ******************************************************************\n\t * File class\n\t ****************************************************************** */\n\n\t/**\n\t * Construct a file object.\n\t *\n\t * Parameters include:\n\t *  - ticks [optional number] - Number of ticks per beat, defaults to 128.\n\t *    Must be 1-32767.\n\t *  - tracks [optional array] - Track data.\n\t */\n\tvar File = function(config){\n\t\tif (!this) return new File(config);\n\n\t\tvar c = config || {};\n\t\tif (c.ticks) {\n\t\t\tif (typeof c.ticks !== 'number') {\n\t\t\t\tthrow new Error('Ticks per beat must be a number!');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (c.ticks <= 0 || c.ticks >= (1 << 15) || c.ticks % 1 !== 0) {\n\t\t\t\tthrow new Error('Ticks per beat must be an integer between 1 and 32767!');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.ticks = c.ticks || 128;\n\t\tthis.tracks = c.tracks || [];\n\t};\n\n\tFile.HDR_CHUNKID     = \"MThd\";             // File magic cookie\n\tFile.HDR_CHUNK_SIZE  = \"\\x00\\x00\\x00\\x06\"; // Header length for SMF\n\tFile.HDR_TYPE0       = \"\\x00\\x00\";         // Midi Type 0 id\n\tFile.HDR_TYPE1       = \"\\x00\\x01\";         // Midi Type 1 id\n\n\t/**\n\t * Add a track to the file.\n\t *\n\t * @param {Track} track - The track to add.\n\t */\n\tFile.prototype.addTrack = function(track) {\n\t\tif (track) {\n\t\t\tthis.tracks.push(track);\n\t\t\treturn this;\n\t\t} else {\n\t\t\ttrack = new Track();\n\t\t\tthis.tracks.push(track);\n\t\t\treturn track;\n\t\t}\n\t};\n\n\t/**\n\t * Serialize the MIDI file to an array of bytes.\n\t *\n\t * @returns {Array} The array of serialized bytes.\n\t */\n\tFile.prototype.toBytes = function() {\n\t\tvar trackCount = this.tracks.length.toString(16);\n\n\t\t// prepare the file header\n\t\tvar bytes = File.HDR_CHUNKID + File.HDR_CHUNK_SIZE;\n\n\t\t// set Midi type based on number of tracks\n\t\tif (parseInt(trackCount, 16) > 1) {\n\t\t\tbytes += File.HDR_TYPE1;\n\t\t} else {\n\t\t\tbytes += File.HDR_TYPE0;\n\t\t}\n\n\t\t// add the number of tracks (2 bytes)\n\t\tbytes += Util.codes2Str(Util.str2Bytes(trackCount, 2));\n\t\t// add the number of ticks per beat (currently hardcoded)\n\t\tbytes += String.fromCharCode((this.ticks/256),  this.ticks%256);;\n\n\t\t// iterate over the tracks, converting to bytes too\n\t\tthis.tracks.forEach(function(track) {\n\t\t\tbytes += Util.codes2Str(track.toBytes());\n\t\t});\n\n\t\treturn bytes;\n\t};\n\n\t/* ******************************************************************\n\t * Exports\n\t ****************************************************************** */\n\n\texported.Util = Util;\n\texported.File = File;\n\texported.Track = Track;\n\texported.Event = MidiEvent;\n\texported.MetaEvent = MetaEvent;\n\n})( Midi );\n\nif (typeof module != 'undefined' && module !== null) {\n\tmodule.exports = Midi;\n} else if (typeof exports != 'undefined' && exports !== null) {\n\texports = Midi;\n} else {\n\tthis.Midi = Midi;\n}\n","\"use strict\";\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.arp = void 0;\nvar harmonics_1 = require(\"harmonics\");\nvar utils_1 = require(\"./utils\");\nvar DEFAULT_OCTAVE = 4;\n/**\n * Take an array and fill it with it s own elements in the next octave till it s of the specified `len`\n * @param  {Array} arr e.g. ['a4', 'b4']\n * @param  {Number} e.g. len 4\n * @return {Array} e.g. ['a4', 'b4', 'a5', 'b5']\n */\nvar fillArr = function (arr, len) {\n    var bumpOctave = function (el) {\n        if (!el) {\n            throw new Error('Empty element');\n        }\n        var note = el.replace(/\\d/, '');\n        var oct = el.replace(/\\D/g, '') || DEFAULT_OCTAVE;\n        if (!note) {\n            throw new Error('Incorrect note');\n        }\n        return note + (+oct + 1);\n    };\n    // Create a couple of chord arrays with bumped octaves\n    // so that something like [c3, e3, g4] turns into [c4, e4, g5] and [c5, e5, g6]\n    var arr1 = arr.map(bumpOctave);\n    var arr2 = arr1.map(bumpOctave);\n    var finalArr = __spreadArray(__spreadArray(__spreadArray([], arr, true), arr1, true), arr2, true);\n    // Slice and return only as much as required\n    return finalArr.slice(0, len);\n};\n/**\n *\n * @param chordsOrParams a string that denotes space (comma?) separated chords to be used or an object with additional properties\n * By default, if this is a string, the count of notes generated is 8 and the order is ascending.\n * For instance arp('CM FM') will result in an array of notes [C4, E4, G4, F4, A4, C4, C5, E5]\n * You can even provide Params as an object.\n * For e.g. arp({count: 8, order: '10325476', chords: 'FM_4 Gm7b5_4 AbM_4 Bbm_4 Cm_5 DbM_5 EbM_5})\n */\nvar arp = function (chordsOrParams) {\n    var finalArr = [];\n    var params = {\n        count: 4,\n        order: '0123',\n        chords: '',\n    };\n    if (typeof chordsOrParams === 'string') {\n        params.chords = chordsOrParams;\n    }\n    else {\n        if (chordsOrParams.order && chordsOrParams.order.match(/\\D/g)) {\n            throw new TypeError('Invalid value for order');\n        }\n        if (chordsOrParams.count > 8 || chordsOrParams.count < 2) {\n            throw new TypeError('Invalid value for count');\n        }\n        // Provision a order for the notes in case only count was provided\n        if (chordsOrParams.count && !chordsOrParams.order) {\n            params.order = Array.from(Array(chordsOrParams.count).keys()).join('');\n        }\n        Object.assign(params, chordsOrParams);\n    }\n    // Chords can be passed as a string, e.g. 'CM_4 FM_4'\n    // or as an array of notes arrays e.g. [['C3', 'E3', 'G3', 'B3'], ['F3', 'A3', 'C4', 'E4']]\n    if (typeof params.chords === 'string') {\n        var chordsArr = params.chords.split(' ');\n        chordsArr.forEach(function (c, i) {\n            try {\n                var filledArr_1 = fillArr((0, harmonics_1.inlineChord)(c), params.count);\n                // reorder the filledArr as per params.order\n                var reorderedArr = params.order\n                    .split('')\n                    .map(function (idx) { return filledArr_1[idx]; });\n                finalArr = __spreadArray(__spreadArray([], finalArr, true), reorderedArr, true);\n            }\n            catch (e) {\n                throw new Error(\"Cannot decode chord \".concat(i + 1, \" \\\"\").concat(c, \"\\\" in given \\\"\").concat(params.chords, \"\\\"\"));\n            }\n        });\n    }\n    else if (Array.isArray(params.chords)) {\n        params.chords.forEach(function (c, i) {\n            try {\n                var filledArr_2 = fillArr(c, params.count);\n                // reorder the filledArr as per params.order\n                var reorderedArr = params.order\n                    .split('')\n                    .map(function (idx) { return filledArr_2[idx]; });\n                finalArr = __spreadArray(__spreadArray([], finalArr, true), reorderedArr, true);\n            }\n            catch (e) {\n                throw new Error(\"\".concat((0, utils_1.errorHasMessage)(e) ? e.message : e, \" in chord \").concat(i + 1, \" \\\"\").concat(c, \"\\\"\"));\n            }\n        });\n    }\n    else {\n        throw new TypeError('Invalid value for chords');\n    }\n    return finalArr;\n};\nexports.arp = arp;\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.clip = void 0;\nvar utils_1 = require(\"./utils\");\n/**\n * Get default params for a clip, such as root note, pattern etc\n * @return {Object}\n */\nvar getDefaultParams = function () { return ({\n    notes: ['C4'],\n    pattern: 'x',\n    shuffle: false,\n    sizzle: false,\n    sizzleReps: 1,\n    arpegiate: false,\n    subdiv: '4n',\n    amp: 100,\n    accentLow: 70,\n    randomNotes: null,\n    offlineRendering: false,\n}); };\n/**\n * HDR speed is denoted by the number of ticks per note\n * By default this is set to a quarter note (4n) to be in line with Tone.js' default subdivision\n * Technically a bar is 512 ticks long. So it's HDR speed is 512\n * @type {Object}\n */\nvar hdr = {\n    '1m': 2048,\n    '2m': 4096,\n    '3m': 6144,\n    '4m': 8192,\n    '1n': 512,\n    '2n': 256,\n    '4n': 128,\n    '8n': 64,\n    '16n': 32,\n};\nvar clip = function (params) {\n    params = __assign(__assign({}, getDefaultParams()), (params || {}));\n    // If notes is a string, split it into an array\n    if (typeof params.notes === 'string') {\n        // Remove any accidental double spaces\n        params.notes = params.notes.replace(/\\s{2,}/g, ' ');\n        params.notes = params.notes.split(' ');\n    }\n    params.notes = params.notes ? params.notes.map(utils_1.convertChordsToNotes) : [];\n    if (/[^x\\-_[\\]R]/.test(params.pattern)) {\n        throw new TypeError(\"pattern can only comprise x - _ [ ] R, found \".concat(params.pattern));\n    }\n    if (params.shuffle) {\n        params.notes = (0, utils_1.shuffle)(params.notes);\n    }\n    if (params.randomNotes && typeof params.randomNotes === 'string') {\n        params.randomNotes = params.randomNotes.replace(/\\s{2,}/g, ' ').split(/\\s/);\n    }\n    if (params.randomNotes) {\n        params.randomNotes = params.randomNotes.map(utils_1.convertChordsToNotes);\n    }\n    var clipNotes = [];\n    var step = 0;\n    /**\n     * Recursively apply pattern to notes\n     *\n     * Pass in a pattern array such as ['x', '-', 'x', 'x'] with a length for each element\n     * The length is the HDR speed or tick length (obtained from the hdr object in this script)\n     * If the element of this array is also a (pattern) array, then divide the length by\n     * the length of the inner array and then call the recursive function on that inner array\n     */\n    var recursivelyApplyPatternToNotes = function (patternArr, length, parentNoteLength) {\n        var totalLength = 0;\n        patternArr.forEach(function (char, idx) {\n            var _a;\n            if (typeof char === 'string') {\n                var note = null;\n                if (char === '-') {\n                    // note = null;\n                }\n                else if (char === 'R' &&\n                    (0, utils_1.randomInt)() && // Use 1/2 probability for R to pick from param.notes\n                    params.randomNotes &&\n                    params.randomNotes.length > 0) {\n                    note = params.randomNotes[(0, utils_1.randomInt)(params.randomNotes.length - 1)];\n                }\n                else if (params.notes) {\n                    note = params.notes[step];\n                }\n                if (char === 'x' || char === 'R') {\n                    step++;\n                }\n                // Push only note on OR off messages to the clip notes array\n                if (char === 'x' || char === '-' || char === 'R') {\n                    clipNotes.push({\n                        note: note,\n                        length: length,\n                        level: char === 'R' && !params.randomNotes\n                            ? params.accentLow\n                            : params.amp,\n                    });\n                    totalLength += length;\n                }\n                // In case of an underscore, simply extend the previous note's length\n                if (char === '_' && clipNotes.length) {\n                    clipNotes[clipNotes.length - 1].length += length;\n                    totalLength += length;\n                }\n                // if there were triplets in this iteration then ajust length of the last note\n                if (parentNoteLength &&\n                    totalLength !== parentNoteLength &&\n                    idx === patternArr.length - 1) {\n                    var diff = Math.abs(parentNoteLength - totalLength);\n                    var lastClipNote = clipNotes[clipNotes.length - 1];\n                    if (lastClipNote.length > diff) {\n                        lastClipNote.length = lastClipNote.length - diff;\n                    }\n                    else {\n                        lastClipNote.length = lastClipNote.length + diff;\n                    }\n                }\n                // If the pattern is longer than the notes, then repeat notes\n                if (step === ((_a = params.notes) === null || _a === void 0 ? void 0 : _a.length)) {\n                    step = 0;\n                }\n            }\n            // Note: The following condition is not in a else if simply because\n            // we do need to increment the totalLength in order to support triplets\n            if (Array.isArray(char)) {\n                var isTriplet = false;\n                // either this is a triplet or not\n                if (char.length % 2 !== 0 || length % 2 !== 0) {\n                    isTriplet = true;\n                }\n                recursivelyApplyPatternToNotes(char, Math.round(length / char.length), isTriplet && length);\n                // Increment total length to support subsequent operations\n                // once we are out of the recursion\n                totalLength += length;\n            }\n        });\n    };\n    recursivelyApplyPatternToNotes((0, utils_1.expandStr)(params.pattern), hdr[params.subdiv] || hdr['4n'], false);\n    // Many thanks to @R1G for the following functionality\n    if (params.sizzle) {\n        var volArr = [];\n        var style = params.sizzle === true ? 'sin' : params.sizzle;\n        var beats = clipNotes.length;\n        var amp = params.amp;\n        var sizzleReps = params.sizzleReps;\n        var stepLevel = amp / (beats / sizzleReps);\n        if (style === 'sin' || style === 'cos') {\n            for (var i = 0; i < beats; i++) {\n                var level = Math[style]((i * Math.PI) / (beats / sizzleReps)) * amp;\n                volArr.push(Math.round(Math.abs(level)));\n            }\n        }\n        if (style === 'rampUp') {\n            var level = 0;\n            for (var i = 0; i < beats; i++) {\n                if (i % (beats / sizzleReps) === 0) {\n                    level = 0;\n                }\n                else {\n                    level = level + stepLevel;\n                }\n                volArr.push(Math.round(Math.abs(level)));\n            }\n        }\n        if (style === 'rampDown') {\n            var level = amp;\n            for (var i = 0; i < beats; i++) {\n                if (i % (beats / sizzleReps) === 0) {\n                    level = amp;\n                }\n                else {\n                    level = level - stepLevel;\n                }\n                volArr.push(Math.round(Math.abs(level)));\n            }\n        }\n        for (var i = 0; i < volArr.length; i++) {\n            clipNotes[i].level = volArr[i] ? volArr[i] : 1; // Cannot allow 0 value on level\n        }\n    }\n    if (params.accent) {\n        // TODO: Eslint barks at \\- as useless, need to verify that JS handles - without \\ properly.\n        if (/[^x-]/.test(params.accent)) {\n            throw new TypeError('Accent can only have x and - characters');\n        }\n        var a = 0;\n        for (var _i = 0, clipNotes_1 = clipNotes; _i < clipNotes_1.length; _i++) {\n            var clipNote = clipNotes_1[_i];\n            var level = params.accent[a] === 'x'\n                ? params.amp\n                : params.accentLow;\n            if (params.sizzle) {\n                level = (clipNote.level + level) / 2;\n            }\n            clipNote.level = Math.round(level);\n            // Step to the next character in the accent\n            a = a + 1;\n            // Reset `a` so that it can loop over the accent\n            if (a === params.accent.length) {\n                a = 0;\n            }\n        }\n    }\n    return clipNotes;\n};\nexports.clip = clip;\n","\"use strict\";\n// global LiveAPI:true\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.midi = void 0;\nvar fs_1 = __importDefault(require(\"fs\"));\nvar jsmidgen = __importStar(require(\"jsmidgen\"));\n/**\n * Take an array of note objects to generate a MIDI file in the same location as this method is called\n * @param  {<Array>NoteObject} notes    Notes are in the format: {note: ['c3'], level: 127, length: 64}\n * @param  {String | null} fileName If a filename is not provided, then `music.mid` is used by default\n * If `null` is passed for `fileName`, bytes are returned instead of creating a file\n * If this method is called from a browser then it will return a HTML link that you can append in your page\n * This link will enable the generated MIDI as a downloadable file.\n * @param {Number | null} bpm If a value is provided, the generated midi file will be set to this bpm value.\n */\nvar midi = function (notes, fileName, bpm) {\n    if (fileName === void 0) { fileName = 'music.mid'; }\n    var file = createFileFromNotes(notes, bpm);\n    var bytes = file.toBytes();\n    if (fileName === null) {\n        return bytes;\n    }\n    if (!fileName.endsWith('.mid')) {\n        fileName = fileName + '.mid';\n    }\n    if (typeof window !== 'undefined' &&\n        window.URL &&\n        window.URL.createObjectURL) {\n        return createDownloadLink(bytes, fileName);\n    }\n    fs_1.default.writeFileSync(fileName, bytes, 'binary');\n    console.log(\"MIDI file generated: \".concat(fileName, \".\"));\n};\nexports.midi = midi;\n/**\n * Create a downloadable link\n * @param b\n */\nvar createDownloadLink = function (b, fileName) {\n    // Convert bytes to array buffer\n    // Accepted answer on https://stackoverflow.com/questions/35038884/download-file-from-bytes-in-javascript\n    var bytes = new Uint8Array(b.length);\n    for (var i = 0; i < b.length; i++) {\n        var ascii = b.charCodeAt(i);\n        bytes[i] = ascii;\n    }\n    // Create a Blob so that we can set it up with the type of file we want (for eg MIDI)\n    var blob = new Blob([bytes], { type: 'audio/midi' });\n    // Create a link element to be used (you can use an existing link on the page as well)\n    var link = document.createElement('a');\n    link.href =\n        (typeof window !== 'undefined' &&\n            typeof window.URL !== 'undefined' &&\n            typeof window.URL.createObjectURL !== 'undefined' &&\n            window.URL.createObjectURL(blob)) ||\n            '';\n    // Give the downloadable file a name\n    link.download = fileName;\n    link.innerText = 'Download MIDI file';\n    return link;\n};\nvar createFileFromNotes = function (notes, bpm) {\n    var file = new jsmidgen.File();\n    var track = new jsmidgen.Track();\n    // set the track's bpm if it is provided\n    if (typeof bpm === 'number') {\n        track.setTempo(bpm);\n    }\n    file.addTrack(track);\n    for (var _i = 0, notes_1 = notes; _i < notes_1.length; _i++) {\n        var noteObj = notes_1[_i];\n        var level = noteObj.level || 127;\n        // While writing chords (multiple notes per tick)\n        // only the first noteOn (or noteOff) needs the complete arity of the function call\n        // subsequent calls need only the first 2 args (channel and note)\n        if (noteObj.note) {\n            if (typeof noteObj.note === 'string') {\n                track.noteOn(0, noteObj.note, noteObj.length, level); // channel, pitch(note), length, velocity\n                track.noteOff(0, noteObj.note, noteObj.length, level);\n            }\n            else {\n                track.addChord(0, noteObj.note, noteObj.length, level);\n            }\n        }\n        else {\n            track.noteOff(0, '', noteObj.length);\n        }\n    }\n    return file;\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.progression = exports.getChordsByProgression = exports.getChordDegrees = void 0;\nvar harmonics_1 = require(\"harmonics\");\nvar utils_1 = require(\"./utils\");\n/**\n * Get the chords that go with a given scale/mode\n * This is useful only in case you want to check what chords work with a scale/mode\n * so that you can come up with chord progressions\n * @param  {String} mode e.g. major\n * @return {Array} e.g.['I', 'ii', 'iii', 'IV', 'V', 'vi', 'vii°']\n */\nvar getChordDegrees = function (mode) {\n    var theRomans = {\n        ionian: ['I', 'ii', 'iii', 'IV', 'V', 'vi', 'vii°'],\n        dorian: ['i', 'ii', 'III', 'IV', 'v', 'vi°', 'VII'],\n        phrygian: ['i', 'II', 'III', 'iv', 'v°', 'VI', 'vii'],\n        lydian: ['I', 'II', 'iii', 'iv°', 'V', 'vi', 'vii'],\n        mixolydian: ['I', 'ii', 'iii°', 'IV', 'v', 'vi', 'VII'],\n        aeolian: ['i', 'ii°', 'III', 'iv', 'v', 'VI', 'VII'],\n        locrian: ['i°', 'II', 'iii', 'iv', 'V', 'VI', 'vii'],\n        'melodic minor': ['i', 'ii', 'III+', 'IV', 'V', 'vi°', 'vii°'],\n        'harmonic minor': ['i', 'ii°', 'III+', 'iv', 'V', 'VI', 'vii°'],\n    };\n    theRomans.major = theRomans.ionian;\n    theRomans.minor = theRomans.aeolian;\n    return theRomans[mode] || [];\n};\nexports.getChordDegrees = getChordDegrees;\nvar idxByDegree = {\n    i: 0,\n    ii: 1,\n    iii: 2,\n    iv: 3,\n    v: 4,\n    vi: 5,\n    vii: 6,\n};\n/**\n * Get a chord name from degree\n * @param  {String} roman e.g. ii OR ii° OR V7\n * @return {String} e.g. m OR m7b5 OR Maj7\n */\nvar getChordName = function (roman) {\n    // remove any non character\n    var str = roman.replace(/\\W/g, '');\n    var prefix = 'M';\n    // check if it s lowercase\n    if (str.toLowerCase() === str) {\n        prefix = 'm';\n    }\n    if (roman.indexOf('°') > -1) {\n        return prefix + '7b5';\n    }\n    if (roman.indexOf('+') > -1) {\n        return prefix + '#5';\n    }\n    if (roman.indexOf('7') > -1) {\n        return prefix === 'M' ? 'maj7' : 'm7';\n    }\n    return prefix;\n};\n/**\n * Take the specified scale and degrees and return the chord names for them\n * These can be used as the value for the `notes` param of the `clip` method\n * @param {String} noteOctaveScale e.g. 'C4 major'\n * @param  {String} chordDegress e.g. 'I IV V IV'\n * @return {String} e.g. 'CM FM GM FM'\n */\nvar getChordsByProgression = function (noteOctaveScale, chordDegress) {\n    // Set the octave if missing\n    // For example if the method was called with `C major` instead of `C4 major`, then add the 4\n    var noteOctaveScaleArr = noteOctaveScale.split(' ');\n    if (!noteOctaveScaleArr[0].match(/\\d/)) {\n        noteOctaveScaleArr[0] += '4';\n        noteOctaveScale = noteOctaveScaleArr.join(' ');\n    }\n    // Get the scale from the given note and scale/mode combination\n    var mode = (0, harmonics_1.scale)(noteOctaveScale);\n    var chordDegreesArr = chordDegress.replace(/\\s*,+\\s*/g, ' ').split(' ');\n    // Now we have something like ['i', 'ii', 'IV']\n    // Convert it to a chord family such as ['Cm', 'Dm', 'FM']\n    var chordFamily = chordDegreesArr.map(function (roman) {\n        var chordName = getChordName(roman); // e.g. m\n        // get the index to be used by removing any digit or non alphabet character\n        var scaleId = idxByDegree[roman.replace(/\\W|\\d/g, '').toLowerCase()]; // e.g. 0\n        // get the note itself\n        var note = mode[scaleId]; // e.g. C\n        // get the octave of the note;\n        var oct = note.replace(/\\D+/, ''); // e.g. 4\n        // now get the chord\n        return note.replace(/\\d/, '') + chordName + '_' + oct;\n    });\n    return chordFamily.toString().replace(/,/g, ' ');\n};\nexports.getChordsByProgression = getChordsByProgression;\nvar getProgFactory = function (_a) {\n    var T = _a.T, P = _a.P, D = _a.D;\n    return function (count) {\n        if (count === void 0) { count = 4; }\n        var chords = [];\n        // Push root/tonic\n        chords.push((0, utils_1.pickOne)(T));\n        var i = 1;\n        // Pick a predominant\n        if (i < count - 1) {\n            chords.push((0, utils_1.pickOne)(P));\n            i++;\n        }\n        // Try another predominant\n        if (i < count - 1 && (0, utils_1.dice)()) {\n            chords.push((0, utils_1.pickOne)(P));\n            i++;\n        }\n        // /////// 4 or more//////////\n        if (i < count - 1) {\n            // Pick a dominant\n            chords.push((0, utils_1.pickOne)(D));\n            i++;\n        }\n        if (i < count - 1) {\n            // Pick a predominant\n            chords.push((0, utils_1.pickOne)(P));\n            i++;\n        }\n        if (i < count - 1) {\n            // Pick a dominant\n            chords.push((0, utils_1.pickOne)(D));\n            i++;\n        }\n        // Pick a predominant if possible\n        if (i < count - 1 && (0, utils_1.dice)()) {\n            chords.push((0, utils_1.pickOne)(P));\n            i++;\n        }\n        // //////////////////////////\n        // Fill the rest with dominant\n        while (i < count) {\n            chords.push((0, utils_1.pickOne)(D));\n            i++;\n        }\n        return chords;\n    };\n};\nvar M = getProgFactory({ T: ['I', 'vi'], P: ['ii', 'IV'], D: ['V'] });\nvar m = getProgFactory({ T: ['i', 'VI'], P: ['ii', 'iv'], D: ['V'] });\n/**\n * Generate a chord progression based on basic music theory\n * where we follow tonic to optionally predominant and then dominant\n * and then randomly to predominant and continue this till we reach `count`\n * @param scaleType e.g. M (for major chord progression), m (for minor chord progression)\n * @param count e.g. 4\n */\nvar progression = function (scaleType, count) {\n    if (count === void 0) { count = 4; }\n    if (scaleType === 'major' || scaleType === 'M') {\n        return M(count);\n    }\n    if (scaleType === 'minor' || scaleType === 'm') {\n        return m(count);\n    }\n    return [];\n};\nexports.progression = progression;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomInt = exports.convertChordsToNotes = exports.convertChordToNotes = exports.errorHasMessage = exports.flat = exports.dice = exports.pickOne = exports.sizzleMap = exports.shuffle = exports.expandStr = exports.isNote = void 0;\nvar harmonics_1 = require(\"harmonics\");\n/**\n * Take a string input and check if it s a note name or not\n * @param  {String} str Note name e.g. c4\n * @return {Boolean} Return true for c4 or return false for something like CM\n */\nvar isNote = function (str) {\n    return /^[a-gA-G](?:#|b)?\\d$/.test(str);\n};\nexports.isNote = isNote;\n/**\n * Take a String input such as xxx[xx[xx]]\n * and return an Array as ['x', 'x', 'x', ['x', 'x', ['x', 'x']]]\n * @param  {String} str\n * @return {Array}\n */\nvar expandStr = function (str) {\n    str = JSON.stringify(str.split(''));\n    str = str.replace(/,\"\\[\",/g, ', [');\n    str = str.replace(/\"\\[\",/g, '[');\n    str = str.replace(/,\"\\]\"/g, ']');\n    return JSON.parse(str);\n};\nexports.expandStr = expandStr;\n/**\n * Basic Array randomizer\n * @param  {Array} arr\n * @param  {boolean} fullShuffle Ensure no elements remain in old place\n * @return {Array}\n */\nvar shuffle = function (arr, fullShuffle) {\n    if (fullShuffle === void 0) { fullShuffle = true; }\n    var lastIndex = arr.length - 1;\n    // Shuffle algorithm by Richard Durstenfeld (Donald E. Knuth), also Ronald Fisher and Frank Yates.\n    // \"Full Shuffle\" Modification to ensure no elements remain in their original place (by taking each element once\n    // and swapping with any remaining elements)\n    arr.forEach(function (el, idx) {\n        if (idx >= lastIndex) {\n            // No shuffling last element\n            // One before last is always swapped with last at the end of the loop\n            // Since previous swaps can move last element into other places, there is still a random shuffle of last element\n            return;\n        }\n        // Swap el with one of the higher elements randomly\n        var rnd = fullShuffle\n            ? // Pick random number from idx+1 to lastIndex (Modified algorithm, (N-1)! combinations)\n                // Math.random -> [0, 1) -> [0, lastIndex-idx ) --floor-> [0, lastIndex-idx-1]\n                // rnd = [0, lastIndex-idx-1] + 1 + idx = [1 + idx, lastIndex]\n                // (Original algorithm would pick rnd = [idx, lastIndex], thus any element could arrive back into its slot)\n                Math.floor(Math.random() * (lastIndex - idx)) + 1 + idx\n            : // Pick random number from idx to lastIndex (Unmodified Richard Durstenfeld, N! combinations)\n                Math.floor(Math.random() * (lastIndex + 1 - idx)) + idx;\n        arr[idx] = arr[rnd];\n        arr[rnd] = el;\n    });\n    return arr;\n};\nexports.shuffle = shuffle;\n/**\n * Return an array of numbers relative to maxLevel || 127 ordered in a Sine wave format\n * This is used by the `sizzle` param of the `clip` method to add a rudimentary variation to the accent of each note\n * @param {Number} maxLevel A number between not more than 127\n * @return {Array}  Example output [63, 90, 110, 127, 110, 90, 63, 0, 63, 90, 110, 127, 110, 90, 63, 0]\n */\nvar sizzleMap = function (maxLevel) {\n    if (maxLevel === void 0) { maxLevel = 127; }\n    var pi = Math.PI;\n    var piArr = [\n        pi / 6,\n        pi / 4,\n        pi / 3,\n        pi / 2,\n        (2 * pi) / 3,\n        (3 * pi) / 4,\n        (5 * pi) / 6,\n        pi,\n    ];\n    var piArrRev = [\n        0,\n        pi / 6,\n        pi / 4,\n        pi / 3,\n        pi / 2,\n        (2 * pi) / 3,\n        (3 * pi) / 4,\n        (5 * pi) / 6,\n    ];\n    piArrRev.reverse();\n    var arr = piArr.concat(piArrRev);\n    return arr.map(function (element) { return Math.round(Math.sin(element) * maxLevel); });\n};\nexports.sizzleMap = sizzleMap;\n/**\n * Pick one item randomly from an array and return it\n * @param arr\n */\nvar pickOne = function (arr) {\n    return arr.length > 1 ? arr[Math.round(Math.random())] : arr[0];\n};\nexports.pickOne = pickOne;\n/**\n * Boolean generator\n */\nvar dice = function () { return !!Math.round(Math.random()); };\nexports.dice = dice;\n/**\n * Polyfill for Array.prototype.flat\n */\nvar flat = function (arr) {\n    return arr.reduce(function (acc, val) { return acc.concat(val); }, []);\n};\nexports.flat = flat;\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nvar errorHasMessage = function (x) {\n    return typeof x.message === 'string';\n};\nexports.errorHasMessage = errorHasMessage;\n/**\n *  'el' could be an inlineChord() e.g. Cmaj7 or Dbsus2_5\n *  or a chord() e.g. 'C3 M'\n */\nvar convertChordToNotes = function (el) {\n    // Try both inlineChord() and chord()\n    var c1;\n    var c2;\n    var e1;\n    var e2;\n    try {\n        c1 = (0, harmonics_1.inlineChord)(el);\n    }\n    catch (e) {\n        e1 = e;\n    }\n    try {\n        c2 = (0, harmonics_1.chord)(el.replace(/_/g, ' ')); // chord() is not friendly to underscores\n    }\n    catch (e) {\n        e2 = e;\n    }\n    if (!e1 && !e2) {\n        // Both inlineChord() and chord() have result\n        if (c1.toString() !== c2.toString()) {\n            throw new Error(\"Chord \".concat(el, \" cannot decode, guessing \").concat(c1, \" or \").concat(c2));\n        }\n        return c1;\n    } // else\n    if (!e1) {\n        return c1;\n    } // else\n    if (!e2) {\n        return c2;\n    } // else\n    // Give up, last try:\n    return (0, harmonics_1.chord)(el);\n};\nexports.convertChordToNotes = convertChordToNotes;\nvar convertChordsToNotes = function (el) {\n    if (typeof el === 'string' && (0, exports.isNote)(el)) {\n        // A note needs to be an array so that it can accomodate chords or single notes with a single interface\n        return [el];\n    }\n    if (Array.isArray(el)) {\n        // This could be a chord provided as an array or an array of arrays\n        el.forEach(function (n) {\n            // This could be a chord provided as an array\n            if (Array.isArray(n)) {\n                // TODO: Can we convert it to something useful?\n                // make sure it uses valid notes\n                n.forEach(function (n1) {\n                    if (typeof n1 !== 'string' || !(0, exports.isNote)(n1)) {\n                        throw new TypeError('array of arrays must comprise valid notes');\n                    }\n                });\n                // throw new TypeError('cannot decode array of arrays');\n            }\n            else if (typeof n !== 'string' || !(0, exports.isNote)(n)) {\n                // make sure it uses valid notes\n                throw new TypeError('array must comprise valid notes');\n            }\n        });\n        return el;\n        // ? return el as (string | string[])[];\n    }\n    if (!Array.isArray(el)) {\n        var c = (0, exports.convertChordToNotes)(el);\n        if (c && c.length) {\n            return c;\n        }\n    }\n    throw new Error(\"Chord \".concat(el, \" not found\"));\n};\nexports.convertChordsToNotes = convertChordsToNotes;\nvar randomInt = function (num) {\n    if (num === void 0) { num = 1; }\n    return Math.round(Math.random() * num);\n};\nexports.randomInt = randomInt;\n","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.midi = exports.arp = exports.progression = exports.getChordsByProgression = exports.getChordDegrees = exports.clip = exports.chords = exports.chord = exports.modes = exports.scales = exports.mode = exports.scale = void 0;\nvar harmonics_1 = require(\"harmonics\");\nObject.defineProperty(exports, \"scales\", { enumerable: true, get: function () { return harmonics_1.scales; } });\nObject.defineProperty(exports, \"modes\", { enumerable: true, get: function () { return harmonics_1.scales; } });\nObject.defineProperty(exports, \"chords\", { enumerable: true, get: function () { return harmonics_1.chords; } });\nObject.defineProperty(exports, \"scale\", { enumerable: true, get: function () { return harmonics_1.scale; } });\nObject.defineProperty(exports, \"mode\", { enumerable: true, get: function () { return harmonics_1.scale; } });\nObject.defineProperty(exports, \"chord\", { enumerable: true, get: function () { return harmonics_1.chord; } });\nvar clip_1 = require(\"./clip\");\nObject.defineProperty(exports, \"clip\", { enumerable: true, get: function () { return clip_1.clip; } });\nvar progression_1 = require(\"./progression\");\nObject.defineProperty(exports, \"getChordDegrees\", { enumerable: true, get: function () { return progression_1.getChordDegrees; } });\nObject.defineProperty(exports, \"getChordsByProgression\", { enumerable: true, get: function () { return progression_1.getChordsByProgression; } });\nObject.defineProperty(exports, \"progression\", { enumerable: true, get: function () { return progression_1.progression; } });\nvar arp_1 = require(\"./arp\");\nObject.defineProperty(exports, \"arp\", { enumerable: true, get: function () { return arp_1.arp; } });\nvar midi_1 = require(\"./midi\");\nObject.defineProperty(exports, \"midi\", { enumerable: true, get: function () { return midi_1.midi; } });\n"],"names":["n","exports","JSON","parse","e","o","a","i","r","d","Object","defineProperty","enumerable","get","prototype","hasOwnProperty","call","Symbol","toStringTag","value","chord","m","chords","t","inlineChord","scale","c","scales","s","Error","concat","indexOf","slice","toUpperCase","charAt","replace","l","isNaN","b","map","u","p","h","f","length","push","includes","split","keys","__esModule","Midi","exported","DEFAULT_VOLUME","Util","DEFAULT_DURATION","DEFAULT_CHANNEL","midi_letter_pitches","g","midiPitchFromNote","matches","exec","note","toLowerCase","accidental","parseInt","substr","ensureMidiPitch","test","midi_pitches_letter","midi_flattened_notes","noteFromMidiPitch","returnFlattened","noteName","octave","noteNum","Math","floor","mpqnFromBpm","bpm","mpqn","ret","unshift","bpmFromMpqn","codes2Str","byteArray","String","fromCharCode","apply","str2Bytes","str","finalBytes","bytes","chars","translateTickTime","ticks","buffer","bList","MidiEvent","params","this","type","undefined","channel","param1","setTime","time","setType","setChannel","setParam1","setParam2","param2","NOTE_OFF","NOTE_ON","AFTER_TOUCH","CONTROLLER","PROGRAM_CHANGE","CHANNEL_AFTERTOUCH","PITCH_BEND","toBytes","typeChannelByte","MetaEvent","setData","data","SEQUENCE","TEXT","COPYRIGHT","TRACK_NAME","INSTRUMENT","LYRIC","MARKER","CUE_POINT","CHANNEL_PREFIX","END_OF_TRACK","TEMPO","SMPTE","TIME_SIG","KEY_SIG","SEQ_EVENT","Array","isArray","dataBytes","x","charCodeAt","Track","config","events","START_BYTES","END_BYTES","addEvent","event","addNoteOn","noteOn","pitch","velocity","addNoteOff","noteOff","addNote","dur","addChord","forEach","index","setInstrument","instrument","setTempo","tempo","trackLength","eventBytes","startBytes","endBytes","lengthBytes","toString","File","tracks","HDR_CHUNKID","HDR_CHUNK_SIZE","HDR_TYPE0","HDR_TYPE1","addTrack","track","trackCount","Event","module","__spreadArray","to","from","pack","arguments","ar","arp","harmonics_1","utils_1","fillArr","arr","len","bumpOctave","el","oct","arr1","arr2","chordsOrParams","finalArr","count","order","match","TypeError","join","assign","filledArr_1","reorderedArr","idx","filledArr_2","errorHasMessage","message","__assign","clip","hdr","notes","pattern","shuffle","sizzle","sizzleReps","arpegiate","subdiv","amp","accentLow","randomNotes","offlineRendering","convertChordsToNotes","clipNotes","step","recursivelyApplyPatternToNotes","patternArr","parentNoteLength","totalLength","char","_a","randomInt","level","diff","abs","lastClipNote","isTriplet","round","expandStr","volArr","style","beats","stepLevel","PI","accent","_i","clipNotes_1","clipNote","__createBinding","create","k","k2","__setModuleDefault","v","__importStar","mod","result","__importDefault","midi","fs_1","jsmidgen","fileName","createFileFromNotes","endsWith","window","URL","createObjectURL","createDownloadLink","default","writeFileSync","console","log","Uint8Array","ascii","blob","Blob","link","document","createElement","href","download","innerText","file","notes_1","noteObj","progression","getChordsByProgression","getChordDegrees","mode","theRomans","ionian","dorian","phrygian","lydian","mixolydian","aeolian","locrian","major","minor","idxByDegree","ii","iii","iv","vi","vii","noteOctaveScale","chordDegress","noteOctaveScaleArr","roman","chordName","prefix","getChordName","scaleId","getProgFactory","T","P","D","pickOne","dice","M","scaleType","convertChordToNotes","flat","sizzleMap","isNote","stringify","fullShuffle","lastIndex","rnd","random","maxLevel","pi","piArr","piArrRev","reverse","element","sin","reduce","acc","val","c1","c2","e1","e2","n1","num","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","id","loaded","__webpack_modules__","nmd","paths","children","modes","clip_1","progression_1","arp_1","midi_1"],"sourceRoot":""}